@import '../../shared/variables.scss';
@import '../../shared/style.scss';

$gap: 20px;

.plots {
  width: 100%;
  height: 100%;
}

.plotsContainer {
  width: 100%;

  summary {
    list-style-type: none;
    font-family: var(--vscode-font-family);
    margin: 14px 10px;
    font-weight: bold;
    font-size: 1.25rem;
    display: flex;
    align-items: center;
    width: max-content;

    svg {
      cursor: pointer;
    }
  }
}

.plotsContainerWrapper {
  position: relative;
}

.detailsIcon {
  fill: $fg-color;
  margin-bottom: -4px;
}

.iconMenu {
  position: absolute;
  right: $gap;
  top: -15px;
  z-index: 10;
}

.plotsWrapper {
  width: 100%;
}

:global(.vega-bindings):not(:empty) {
  position: absolute;
  bottom: 0;
  width: 100%;
  background-color: $fg-color;
  padding: 10px;
  display: none;

  label {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  input {
    accent-color: $accent-color;
  }
}

:global(.vega-embed) {
  width: 100%;
  height: 100%;
  align-self: center;
  display: flex !important;
  align-items: center;
  justify-content: center;

  &:hover {
    :global(.vega-bindings) {
      display: block;
    }
  }

  svg {
    overflow: visible;
  }
}

.singleViewPlotsGrid,
.multiViewPlotsGrid {
  width: 100%;
  height: max-content;

  + .singleViewPlotsGrid,
  + .multiViewPlotsGrid {
    margin-top: $gap;
  }
}

:global(.ReactVirtualized__Grid__innerScrollContainer),
.noBigGrid {
  width: calc(100% - $gap * 2) !important;
  max-width: none !important;
  max-height: none !important;
  height: auto !important;
  margin-left: $gap;
  display: grid;
  gap: $gap;
  grid-auto-flow: row;

  + .singleViewPlotsGrid,
  + .multiViewPlotsGrid {
    margin-top: $gap;
  }

  // When editing the grid-template-column for any viewport or plot size, `getNbItemsPerRow` in the `./utils.ts` file should also be updated
  .largePlots & {
    grid-template-columns: repeat(auto-fill, minmax(500px, 1fr));
  }

  .regularPlots & {
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  }

  .smallPlots & {
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));

    :global(.role-axis-title) text {
      font-size: 10px;
    }
  }

  @media (min-width: 800px) {
    .largePlots & {
      grid-template-columns: 1fr 1fr;
    }
  }

  @media (min-width: 1200px) {
    .regularPlots & {
      grid-template-columns: 1fr 1fr 1fr;
    }

    .smallPlots & {
      grid-template-columns: 1fr 1fr 1fr 1fr;
    }
  }

  @media (min-width: 1600px) {
    .largePlots & {
      grid-template-columns: 1fr 1fr 1fr;
    }

    .regularPlots & {
      grid-template-columns: 1fr 1fr 1fr 1fr;
    }

    .smallPlots & {
      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
    }
  }

  @media (min-width: 2000px) {
    .largePlots & {
      grid-template-columns: repeat(auto-fill, minmax(1fr, 1000px));
    }

    .regularPlots & {
      grid-template-columns: repeat(auto-fill, minmax(1fr, 800px));
    }

    .smallPlots & {
      grid-template-columns: repeat(auto-fill, minmax(1fr, 500px));
    }
  }
}

.multiViewPlotsGrid {
  padding-right: $gap;
}

.plot {
  aspect-ratio: 4 / 3;
  overflow: visible;
  cursor: grab;
  position: relative;
  background: var(--editor-foreground-transparency-1);
  border: none;
  padding-top: 5px;

  .plotGripIcon {
    position: absolute;
    z-index: 2;
    fill: $fg-color;
    left: 0;
    top: 0;
    padding: 5px;
    width: 100%;
    border-top-left-radius: 5px;
    border-bottom-left-radius: 5px;
    opacity: 0;

    path {
      transform: rotate(90deg);
      transform-origin: center;
    }
  }

  &:hover {
    z-index: 2;

    .plotGripIcon {
      opacity: 0.5;
    }
  }
}

.plot img,
.plot svg {
  max-width: 100%;
  max-height: 100%;
  overflow: visible;
}

.plot.multiViewPlot {
  aspect-ratio: calc(0.8 * var(--scale) + 0.2);
  grid-column: span var(--scale);

  .largePlots & {
    width: max-content;
  }

  .regularPlots & {
    width: calc(300px * var(--scale));
  }

  .smallPlots & {
    width: calc(200px * var(--scale));
  }
}

.comparisonTable {
  table-layout: fixed;
  width: 100%;
  position: relative;
  padding: 0 20px;

  .smallPlots & {
    width: calc(25% * var(--scale));
    padding-right: $gap;
    min-width: calc(300px * var(--scale));
  }

  .regularPlots & {
    width: calc(33% * var(--scale));
    padding-right: $gap;
    min-width: calc(400px * var(--scale));
  }

  .largePlots & {
    width: calc(50% * var(--scale));
    padding-right: $gap;
    min-width: calc(500px * var(--scale));
  }

  @media (min-width: 1000px) {
    .smallPlots & {
      width: calc(20% * var(--scale));
    }

    .regularPlots & {
      width: calc(25% * var(--scale));
    }

    .largePlots & {
      width: calc(33% * var(--scale));
    }
  }

  @media (min-width: 2000px) {
    .smallPlots & {
      width: calc(15% * var(--scale));
    }

    .regularPlots & {
      width: calc(20% * var(--scale));
    }

    .largePlots & {
      width: calc(25% * var(--scale));
      padding-right: 0;
    }
  }
}

.dropSectionWrapper {
  height: min-content;
}

.dropSection {
  height: 10px;
}

.dropSectionMaximized,
.dropTarget {
  height: auto;
  opacity: 0.5;
  border: 3px dashed $accent-color;
  display: flex;
  justify-content: center;
  align-items: center;
}

.rowDropTarget {
  width: 100%;
  padding: 20px;
}

.dropIcon {
  border-radius: 100%;
  border: 3px solid $accent-color;
  padding: 20px;
}

.smallDropIcon {
  padding: 5px;
}

.smallDropIcon,
.dropIcon {
  box-sizing: content-box;

  path {
    fill: $accent-color;
  }
}

.zoomablePlot {
  display: block;
  width: 100%;
  height: 100%;
  background: none;
  border: none;
  padding: 0;
}

.zoomedInPlot {
  width: 80vw;
  height: calc(80vh - 100px);

  svg {
    background-color: transparent !important;
    max-width: 100%;
  }
}

.infoTooltipToggle {
  display: flex;
  align-items: center;
}

.infoIcon {
  fill: $accent-color;
  margin-left: 6px;
}

.infoTooltip {
  max-width: 220px;
  padding: 7px 3px;
  white-space: normal;
  display: flex;
  gap: 4px;
  font-size: 0.8125rem;

  svg {
    min-width: 16px;
    min-height: 16px;
  }
}

:global(.has-actions) {
  summary {
    background: $fg-color !important;
  }
}

:global(.vega-actions) {
  background: $fg-color !important;

  &::before,
  &::after {
    border-bottom-color: $fg-color !important;
  }

  a:hover {
    background-color: var(--editor-background-transparency-1) !important;
  }
}
