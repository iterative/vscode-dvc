{
  "name": "dvc",
  "private": true,
  "displayName": "%displayName%",
  "description": "%description%",
  "publisher": "iterative",
  "icon": "docs/dvc.png",
  "version": "0.1.0",
  "license": "Apache-2.0",
  "readme": "./README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/iterative/vscode-dvc"
  },
  "bugs": "https://github.com/iterative/vscode-dvc",
  "homepage": "https://github.com/iterative/vscode-dvc/README.md",
  "keywords": [
    "iterative",
    "data",
    "version",
    "control",
    "dvc"
  ],
  "categories": [
    "Data Science",
    "Visualization"
  ],
  "galleryBanner": {
    "color": "#333",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.58.0-insiders",
    "node": ">=10.2.0"
  },
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "%command.showExperiments%",
        "command": "dvc.showExperiments",
        "category": "DVC"
      },
      {
        "title": "%command.runExperiment%",
        "command": "dvc.runExperiment",
        "category": "DVC",
        "icon": {
          "light": "resources/light/run-experiment.svg",
          "dark": "resources/dark/run-experiment.svg"
        }
      },
      {
        "title": "%command.runResetExperiment%",
        "command": "dvc.runResetExperiment",
        "category": "DVC",
        "icon": "$(notebook-revert)"
      },
      {
        "title": "%command.queueExperiment%",
        "command": "dvc.queueExperiment",
        "category": "DVC",
        "icon": {
          "dark": "resources/dark/queue-experiment.svg",
          "light": "resources/light/queue-experiment.svg"
        }
      },
      {
        "title": "%command.runQueuedExperiments%",
        "command": "dvc.runQueuedExperiments",
        "category": "DVC",
        "icon": {
          "dark": "resources/dark/run-all.svg",
          "light": "resources/light/run-all.svg"
        }
      },
      {
        "title": "%command.stopRunningExperiment%",
        "command": "dvc.stopRunningExperiment",
        "category": "DVC",
        "icon": {
          "light": "resources/light/stop-experiment.svg",
          "dark": "resources/dark/stop-experiment.svg"
        }
      },
      {
        "title": "%command.experimentGarbageCollect%",
        "command": "dvc.experimentGarbageCollect",
        "category": "DVC"
      },
      {
        "title": "%command.applyExperiment%",
        "command": "dvc.applyExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.branchExperiment%",
        "command": "dvc.branchExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.removeExperiment%",
        "command": "dvc.removeExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.deselectDefaultProject%",
        "command": "dvc.deselectDefaultProject",
        "category": "DVC"
      },
      {
        "title": "%command.selectDefaultProject%",
        "command": "dvc.selectDefaultProject",
        "category": "DVC"
      },
      {
        "title": "%command.selectDvcPath%",
        "command": "dvc.selectDvcPath",
        "category": "DVC"
      },
      {
        "title": "%command.init%",
        "command": "dvc.init",
        "category": "DVC"
      },
      {
        "title": "%command.addTarget%",
        "command": "dvc.addTarget",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.checkout%",
        "command": "dvc.checkout",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.checkoutTarget%",
        "command": "dvc.checkoutTarget",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.commit%",
        "command": "dvc.commit",
        "category": "DVC",
        "icon": "$(check)"
      },
      {
        "title": "%command.commitTarget%",
        "command": "dvc.commitTarget",
        "category": "DVC",
        "icon": "$(check)"
      },
      {
        "title": "%command.deleteTarget%",
        "command": "dvc.deleteTarget",
        "category": "DVC",
        "icon": "$(trash)"
      },
      {
        "title": "%command.pull%",
        "command": "dvc.pull",
        "category": "DVC",
        "icon": "$(cloud-download)"
      },
      {
        "title": "%command.pullTarget%",
        "command": "dvc.pullTarget",
        "category": "DVC",
        "icon": "$(cloud-download)"
      },
      {
        "title": "%command.push%",
        "command": "dvc.push",
        "category": "DVC",
        "icon": "$(cloud-upload)"
      },
      {
        "title": "%command.pushTarget%",
        "command": "dvc.pushTarget",
        "category": "DVC",
        "icon": "$(cloud-upload)"
      },
      {
        "title": "%command.removeTarget%",
        "command": "dvc.removeTarget",
        "category": "DVC",
        "icon": "$(trash)"
      },
      {
        "title": "%command.copyFilePath%",
        "command": "dvc.copyFilePath",
        "category": "DVC"
      },
      {
        "title": "%command.copyRelativeFilePath%",
        "command": "dvc.copyRelativeFilePath",
        "category": "DVC"
      }
    ],
    "configuration": {
      "title": "DVC",
      "properties": {
        "dvc.defaultProject": {
          "title": "%config.defaultProject.title%",
          "description": "%config.defaultProject.description%",
          "type": "string",
          "default": null
        },
        "dvc.dvcPath": {
          "title": "%config.dvcPath.title%",
          "description": "%config.dvcPath.description%",
          "type": "string",
          "default": null
        },
        "dvc.views.trackedExplorerTree.noOpenUnsupported": {
          "title": "%config.noOpenUnsupported.title%",
          "description": "%config.noOpenUnsupported.description%",
          "type": "boolean",
          "default": false
        },
        "dvc.views.trackedExplorerTree.noPromptPullMissing": {
          "title": "%config.noPromptPullMissing.title%",
          "description": "%config.noPromptPullMissing.description%",
          "type": "boolean",
          "default": false
        }
      }
    },
    "menus": {
      "commandPalette": [
        {
          "command": "dvc.applyExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.branchExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.experimentGarbageCollect",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.init",
          "when": "false"
        },
        {
          "command": "dvc.queueExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.removeExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.runExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.runQueuedExperiments",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.runResetExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.showExperiments",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.addTarget",
          "when": "false"
        },
        {
          "command": "dvc.checkout",
          "when": "false"
        },
        {
          "command": "dvc.checkoutTarget",
          "when": "false"
        },
        {
          "command": "dvc.commit",
          "when": "false"
        },
        {
          "command": "dvc.commitTarget",
          "when": "false"
        },
        {
          "command": "dvc.deleteTarget",
          "when": "false"
        },
        {
          "command": "dvc.pull",
          "when": "false"
        },
        {
          "command": "dvc.pullTarget",
          "when": "false"
        },
        {
          "command": "dvc.push",
          "when": "false"
        },
        {
          "command": "dvc.pushTarget",
          "when": "false"
        },
        {
          "command": "dvc.removeTarget",
          "when": "false"
        },
        {
          "command": "dvc.copyFilePath",
          "when": "false"
        },
        {
          "command": "dvc.copyRelativeFilePath",
          "when": "false"
        }
      ],
      "scm/title": [
        {
          "command": "dvc.checkout",
          "group": "navigation",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.commit",
          "group": "navigation",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.pull",
          "group": "navigation",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.push",
          "group": "navigation",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        }
      ],
      "scm/resourceState/context": [
        {
          "command": "dvc.addTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceState == untracked && dvc.commands.available == true"
        },
        {
          "command": "dvc.checkoutTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceState != untracked && scmResourceState != notInCache && dvc.commands.available == true"
        },
        {
          "command": "dvc.commitTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceState != untracked && scmResourceState != deleted && dvc.commands.available == true"
        }
      ],
      "editor/title": [
        {
          "command": "dvc.runExperiment",
          "alt": "dvc.runResetExperiment",
          "group": "navigation@0",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "group": "navigation@0",
          "when": "dvc.experiments.webviewActive && dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runQueuedExperiments",
          "group": "navigation@1",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.queueExperiment",
          "group": "navigation@2",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runExperiment",
          "group": "1_run@0",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "group": "1_run@0",
          "when": "dvc.experiments.webviewActive && dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.queueExperiment",
          "group": "1_run@1",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runQueuedExperiments",
          "group": "1_run@2",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runResetExperiment",
          "group": "1_run@3",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        }
      ],
      "view/item/context": [
        {
          "command": "dvc.deleteTarget",
          "when": "viewItem != dvcData",
          "group": "DVC"
        },
        {
          "command": "dvc.removeTarget",
          "when": "viewItem == dvcData",
          "group": "DVC"
        },
        {
          "command": "dvc.pushTarget",
          "group": "DVC",
          "when": "viewItem != dvc"
        },
        {
          "command": "dvc.pullTarget",
          "group": "DVC",
          "when": "viewItem != dvc"
        },
        {
          "command": "dvc.copyFilePath",
          "group": "6_copypath@1"
        },
        {
          "command": "dvc.copyRelativeFilePath",
          "group": "6_copypath@2"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "dvc-views",
          "title": "DVC",
          "icon": "resources/dvc-monochrome.svg"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "dvc.views.trackedExplorerTree",
          "name": "DVC Tracked"
        }
      ],
      "dvc-views": [
        {
          "id": "dvc.views.experimentsColumnsTree",
          "name": "Columns",
          "when": "dvc.commands.available == true && dvc.project.available == true"
        },
        {
          "id": "dvc.views.experimentsSortByTree",
          "name": "Sort By",
          "when": "dvc.commands.available == true && dvc.project.available == true"
        },
        {
          "id": "dvc.views.experimentsFilterByTree",
          "name": "Filter By",
          "when": "dvc.commands.available == true && dvc.project.available == true"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "dvc.views.trackedExplorerTree",
        "contents": "DVC is currently unavailable, [learn more](https://www.dvc.org/).\n[Set DVC CLI path for workspace](command:dvc.selectDvcPath)",
        "when": "dvc.commands.available != true"
      },
      {
        "view": "dvc.views.trackedExplorerTree",
        "contents": "The currently open folder does not contain a DVC project. You can initialize a project which will enable features powered by DVC.\n[Initialize Project](command:dvc.init)\nTo learn more about how to use DVC and this extension please read [our docs](https://dvc.org/doc).",
        "when": "dvc.commands.available == true && dvc.project.available == false"
      },
      {
        "view": "dvc.views.experimentsSortByTree",
        "contents": "No sorts applied. \n[Add Sort](command:dvc.selectDvcPath)\n"
      },
      {
        "view": "dvc.views.experimentsFilterByTree",
        "contents": "No filters applied. \n[Add Filter](command:dvc.selectDvcPath)\n"
      }
    ]
  },
  "enableProposedApi": true,
  "scripts": {
    "dev": "shx rm -rf dist && tsc -watch -p ./",
    "build": "yarn build-webpack && yarn package",
    "build-webpack": "webpack --mode production",
    "package": "vsce package --yarn",
    "pub": "vsce publish --yarn --baseImagesUrl https://github.com/iterative/vscode-dvc/raw/master/extension --baseContentUrl https://github.com/iterative/vscode-dvc/raw/master/extension",
    "test-vscode-build": "tsc -p './'",
    "test-vscode-run": "node ./dist/test/runTest.js",
    "test-staged": "lint-staged",
    "test": "jest",
    "cover": "jest --collect-coverage",
    "vscode:prepublish": ""
  },
  "dependencies": {
    "@hediet/node-reload": "^0.7.3",
    "@hediet/std": "^0.6.0",
    "bufferutil": "^4.0.3",
    "chokidar": "^3.5.1",
    "dayjs": "^1.10.1",
    "execa": "^5.0.0",
    "fs-extra": "^10.0.0",
    "lodash.debounce": "^4.0.8",
    "lodash.isequal": "^4.5.0",
    "lodash.uniqwith": "^4.5.0",
    "mobx": "^6.0.4",
    "utf-8-validate": "^5.0.3"
  },
  "devDependencies": {
    "@types/chai": "^4.2.14",
    "@types/copy-webpack-plugin": "^8.0.0",
    "@types/fs-extra": "^9.0.7",
    "@types/jest": "^26.0.23",
    "@types/lodash.debounce": "^4.0.6",
    "@types/lodash.isequal": "^4.5.5",
    "@types/lodash.uniqwith": "^4.5.6",
    "@types/mocha": "^8.2.0",
    "@types/node": "^14.14.22",
    "@types/sinon-chai": "^3.2.5",
    "@types/vscode": "^1.58.0",
    "chai": "^4.2.0",
    "clean-webpack-plugin": "^3.0.0",
    "copy-webpack-plugin": "^9.0.1",
    "jest": "^27.0.5",
    "lint-staged": "^11.0.0",
    "mocha": "^9.0.0",
    "shx": "^0.3.3",
    "sinon": "^11.1.1",
    "sinon-chai": "^3.5.0",
    "ts-jest": "^27.0.3",
    "ts-loader": "^9.2.3",
    "vsce": "^1.95.0",
    "vscode-test": "^1.5.2",
    "vscode-uri": "^3.0.2",
    "webpack": "^5.40.0",
    "webpack-cli": "^4.7.2"
  },
  "lint-staged": {
    "*.{js,ts,tsx}": "jest --bail --findRelatedTests"
  }
}
