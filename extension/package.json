{
  "name": "dvc",
  "private": true,
  "preview": true,
  "displayName": "%displayName%",
  "description": "%description%",
  "publisher": "iterative",
  "icon": "docs/dvc.png",
  "extensionDependencies": [
    "vscode.git"
  ],
  "version": "0.2.19",
  "license": "Apache-2.0",
  "readme": "./README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/iterative/vscode-dvc"
  },
  "bugs": "https://github.com/iterative/vscode-dvc",
  "homepage": "https://github.com/iterative/vscode-dvc/README.md",
  "keywords": [
    "iterative",
    "data",
    "version",
    "control",
    "dvc"
  ],
  "categories": [
    "Data Science",
    "Visualization"
  ],
  "galleryBanner": {
    "color": "#333",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.64.0",
    "node": ">=10.2.0"
  },
  "activationEvents": [
    "onStartupFinished",
    "workspaceContains:**/*dvc*"
  ],
  "main": "./dist/extension.js",
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": false,
      "description": "This extension depends on the vscode.git extension, which is disabled in Restricted Mode."
    }
  },
  "contributes": {
    "colors": [
      {
        "id": "dvc.metrics",
        "description": "Color to indicate a DVC metric column in the experiments table",
        "defaults": {
          "dark": "#fbd38d",
          "light": "#fbd38d"
        }
      },
      {
        "id": "dvc.params",
        "description": "Color to indicate a DVC param column in the experiments table",
        "defaults": {
          "dark": "#90cdf4",
          "light": "#90cdf4"
        }
      },
      {
        "id": "dvc.workspaceChanged",
        "description": "Color used in the experiments table to highlight a value in the workspace that differs from the latest committed value",
        "defaults": {
          "dark": "gitDecoration.modifiedResourceForeground",
          "light": "gitDecoration.modifiedResourceForeground"
        }
      }
    ],
    "commands": [
      {
        "title": "%command.addExperimentsTableFilter%",
        "command": "dvc.addExperimentsTableFilter",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.addExperimentsTableSort%",
        "command": "dvc.addExperimentsTableSort",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.addTarget%",
        "command": "dvc.addTarget",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.applyExperiment%",
        "command": "dvc.applyExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.branchExperiment%",
        "command": "dvc.branchExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.checkout%",
        "command": "dvc.checkout",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.checkCLICompatible%",
        "command": "dvc.checkCLICompatible",
        "category": "DVC"
      },
      {
        "title": "%command.checkoutTarget%",
        "command": "dvc.checkoutTarget",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.commit%",
        "command": "dvc.commit",
        "category": "DVC",
        "icon": "$(check)"
      },
      {
        "title": "%command.commitTarget%",
        "command": "dvc.commitTarget",
        "category": "DVC",
        "icon": "$(check)"
      },
      {
        "title": "%command.compareSelected%",
        "command": "dvc.compareSelected",
        "category": "DVC"
      },
      {
        "title": "%command.copyFilePath%",
        "command": "dvc.copyFilePath",
        "category": "DVC"
      },
      {
        "title": "%command.copyRelativeFilePath%",
        "command": "dvc.copyRelativeFilePath",
        "category": "DVC"
      },
      {
        "title": "%command.deleteTarget%",
        "command": "dvc.deleteTarget",
        "category": "DVC",
        "icon": "$(trash)"
      },
      {
        "title": "%command.experimentGarbageCollect%",
        "command": "dvc.experimentGarbageCollect",
        "category": "DVC"
      },
      {
        "title": "%command.findInFolder%",
        "command": "dvc.findInFolder",
        "category": "DVC"
      },
      {
        "title": "%command.getStarted%",
        "command": "dvc.getStarted",
        "category": "DVC"
      },
      {
        "title": "%command.gitStageAll%",
        "command": "dvc.gitStageAll",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.gitUnstageAll%",
        "command": "dvc.gitUnstageAll",
        "category": "DVC",
        "icon": "$(remove)"
      },
      {
        "title": "%command.init%",
        "command": "dvc.init",
        "category": "DVC"
      },
      {
        "title": "%command.moveTargets%",
        "command": "dvc.moveTargets",
        "category": "DVC"
      },
      {
        "title": "%command.openToTheSide%",
        "command": "dvc.openToTheSide",
        "category": "DVC"
      },
      {
        "title": "%command.pull%",
        "command": "dvc.pull",
        "category": "DVC",
        "icon": "$(cloud-download)"
      },
      {
        "title": "%command.pullTarget%",
        "command": "dvc.pullTarget",
        "category": "DVC",
        "icon": "$(cloud-download)"
      },
      {
        "title": "%command.push%",
        "command": "dvc.push",
        "category": "DVC",
        "icon": "$(cloud-upload)"
      },
      {
        "title": "%command.pushTarget%",
        "command": "dvc.pushTarget",
        "category": "DVC",
        "icon": "$(cloud-upload)"
      },
      {
        "title": "%command.modifyExperimentParamsAndQueue%",
        "command": "dvc.modifyExperimentParamsAndQueue",
        "category": "DVC",
        "icon": {
          "dark": "resources/dark/queue-experiment.svg",
          "light": "resources/light/queue-experiment.svg"
        }
      },
      {
        "title": "%command.modifyExperimentParamsAndResume%",
        "command": "dvc.modifyExperimentParamsAndResume",
        "category": "DVC",
        "icon": "$(play)"
      },
      {
        "title": "%command.modifyExperimentParamsAndRun%",
        "command": "dvc.modifyExperimentParamsAndRun",
        "category": "DVC",
        "icon": "$(play)"
      },
      {
        "title": "%command.modifyExperimentParamsResetAndRun%",
        "command": "dvc.modifyExperimentParamsResetAndRun",
        "category": "DVC",
        "icon": "$(debug-rerun)"
      },
      {
        "title": "%command.queueExperiment%",
        "command": "dvc.queueExperiment",
        "category": "DVC",
        "icon": {
          "dark": "resources/dark/queue-experiment.svg",
          "light": "resources/light/queue-experiment.svg"
        }
      },
      {
        "title": "%command.removeExperiment%",
        "command": "dvc.removeExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.removeExperimentQueue%",
        "command": "dvc.removeExperimentQueue",
        "category": "DVC"
      },
      {
        "title": "%command.removeExperimentsTableFilters%",
        "command": "dvc.removeExperimentsTableFilters",
        "category": "DVC"
      },
      {
        "title": "%command.removeExperimentsTableSorts%",
        "command": "dvc.removeExperimentsTableSorts",
        "category": "DVC",
        "icon": "$(close-all)"
      },
      {
        "title": "%command.removeQueuedExperiment%",
        "command": "dvc.removeQueuedExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.removeTarget%",
        "command": "dvc.removeTarget",
        "category": "DVC",
        "icon": "$(trash)"
      },
      {
        "title": "%command.renameTarget%",
        "command": "dvc.renameTarget",
        "category": "DVC"
      },
      {
        "title": "%command.resetWorkspace%",
        "command": "dvc.resetWorkspace",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.runExperiment%",
        "command": "dvc.runExperiment",
        "category": "DVC",
        "icon": "$(play)"
      },
      {
        "title": "%command.resumeCheckpointExperiment%",
        "command": "dvc.resumeCheckpointExperiment",
        "category": "DVC",
        "icon": "$(play)"
      },
      {
        "title": "%command.startExperimentsQueue%",
        "command": "dvc.startExperimentsQueue",
        "category": "DVC",
        "icon": "$(run-all)"
      },
      {
        "title": "%command.resetAndRunCheckpointExperiment%",
        "command": "dvc.resetAndRunCheckpointExperiment",
        "category": "DVC",
        "icon": "$(debug-rerun)"
      },
      {
        "title": "%command.selectForCompare%",
        "command": "dvc.selectForCompare",
        "category": "DVC"
      },
      {
        "title": "%command.setupWorkspace%",
        "command": "dvc.setupWorkspace",
        "category": "DVC"
      },
      {
        "title": "%command.showCommands",
        "command": "dvc.showCommands",
        "category": "DVC"
      },
      {
        "title": "%command.showExperiments%",
        "command": "dvc.showExperiments",
        "category": "DVC",
        "icon": "$(beaker)"
      },
      {
        "title": "%command.showOutput%",
        "command": "dvc.showOutput",
        "category": "DVC"
      },
      {
        "title": "%command.showPlots%",
        "command": "dvc.showPlots",
        "category": "DVC",
        "icon": "$(graph-scatter)"
      },
      {
        "title": "%command.stopRunningExperiment%",
        "command": "dvc.stopRunningExperiment",
        "category": "DVC",
        "icon": "$(debug-stop)"
      },
      {
        "title": "%command.views.experimentsFilterByTree.removeAllFilters%",
        "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
        "category": "DVC",
        "icon": "$(close-all)"
      },
      {
        "title": "%command.views.experimentsFilterByTree.removeFilter%",
        "command": "dvc.views.experimentsFilterByTree.removeFilter",
        "category": "DVC",
        "icon": "$(close)"
      },
      {
        "title": "%command.views.experimentsSortByTree.removeAllSorts%",
        "command": "dvc.views.experimentsSortByTree.removeAllSorts",
        "category": "DVC",
        "icon": "$(close-all)"
      },
      {
        "title": "%command.views.experimentsSortByTree.removeSort%",
        "command": "dvc.views.experimentsSortByTree.removeSort",
        "category": "DVC",
        "icon": "$(close)"
      },
      {
        "title": "%command.views.experimentsTree.applyExperiment%",
        "command": "dvc.views.experimentsTree.applyExperiment",
        "category": "DVC",
        "icon": "$(merge)"
      },
      {
        "title": "%command.views.experimentsTree.branchExperiment%",
        "command": "dvc.views.experimentsTree.branchExperiment",
        "category": "DVC",
        "icon": "$(source-control)"
      },
      {
        "title": "%command.views.experimentsTree.queueExperiment%",
        "command": "dvc.views.experimentsTree.queueExperiment",
        "category": "DVC",
        "icon": {
          "dark": "resources/dark/queue-experiment.svg",
          "light": "resources/light/queue-experiment.svg"
        }
      },
      {
        "title": "%command.views.experimentsTree.removeExperiment%",
        "command": "dvc.views.experimentsTree.removeExperiment",
        "category": "DVC",
        "icon": "$(trash)"
      },
      {
        "title": "%command.views.experimentsTree.runExperiment%",
        "command": "dvc.views.experimentsTree.runExperiment",
        "category": "DVC",
        "icon": "$(play)"
      },
      {
        "title": "%command.views.experimentsTree.resumeCheckpointExperiment%",
        "command": "dvc.views.experimentsTree.resumeCheckpointExperiment",
        "category": "DVC",
        "icon": "$(play)"
      },
      {
        "title": "%command.views.experimentsTree.resetAndRunCheckpointExperiment%",
        "command": "dvc.views.experimentsTree.resetAndRunCheckpointExperiment",
        "category": "DVC",
        "icon": "$(debug-rerun)"
      },
      {
        "title": "%command.views.experimentsTree.selectExperiments%",
        "command": "dvc.views.experimentsTree.selectExperiments",
        "category": "DVC",
        "icon": "$(list-selection)"
      },
      {
        "title": "%command.views.experimentsColumnsTree.selectColumns%",
        "command": "dvc.views.experimentsColumnsTree.selectColumns",
        "category": "DVC",
        "icon": "$(list-selection)"
      },
      {
        "title": "%command.views.experimentsTree.autoApplyFilters%",
        "command": "dvc.views.experimentsTree.autoApplyFilters",
        "category": "DVC",
        "icon": "$(filter)"
      },
      {
        "title": "%command.views.experimentsTree.disableAutoApplyFilters%",
        "command": "dvc.views.experimentsTree.disableAutoApplyFilters",
        "category": "DVC",
        "icon": "$(close)"
      },
      {
        "title": "%command.views.plotsPathsTree.selectPlots%",
        "command": "dvc.views.plotsPathsTree.selectPlots",
        "category": "DVC",
        "icon": "$(list-selection)"
      }
    ],
    "configuration": {
      "title": "DVC",
      "properties": {
        "dvc.doNotRecommendRedHatExtension": {
          "title": "%config.doNotRecommendRedHatExtension.title%",
          "description": "%config.doNotRecommendRedHatExtension.description%",
          "type": "boolean",
          "default": null
        },
        "dvc.doNotShowCliUnavailable": {
          "title": "%config.doNotShowCliUnavailable.title%",
          "description": "%config.doNotShowCliUnavailable.description%",
          "type": "boolean",
          "default": null
        },
        "dvc.doNotShowWalkthroughAfterInstall": {
          "title": "%config.doNotShowWalkthroughAfterInstall.title%",
          "description": "%config.doNotShowWalkthroughAfterInstall.description%",
          "type": "boolean",
          "default": null
        },
        "dvc.doNotShowUnableToFilter": {
          "title": "%config.doNotShowUnableToFilter.title%",
          "description": "%config.doNotShowUnableToFilter.description%",
          "type": "boolean",
          "default": null
        },
        "dvc.dvcPath": {
          "title": "%config.dvcPath.title%",
          "description": "%config.dvcPath.description%",
          "type": "string",
          "default": null
        },
        "dvc.pythonPath": {
          "title": "%config.pythonPath.title%",
          "description": "%config.pythonPath.description%",
          "type": "string",
          "default": null
        }
      }
    },
    "languages": [
      {
        "id": "yaml",
        "extensions": [
          ".dvc"
        ],
        "filenames": [
          "dvc.lock"
        ]
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "dvc.addExperimentsTableFilter",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.addExperimentsTableSort",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.addTarget",
          "when": "false"
        },
        {
          "command": "dvc.applyExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.branchExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.checkout",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.checkCLICompatible",
          "when": "dvc.cli.incompatible"
        },
        {
          "command": "dvc.checkoutTarget",
          "when": "false"
        },
        {
          "command": "dvc.commit",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.commitTarget",
          "when": "false"
        },
        {
          "command": "dvc.compareSelected",
          "when": "false"
        },
        {
          "command": "dvc.copyFilePath",
          "when": "false"
        },
        {
          "command": "dvc.copyRelativeFilePath",
          "when": "false"
        },
        {
          "command": "dvc.deleteTarget",
          "when": "false"
        },
        {
          "command": "dvc.experimentGarbageCollect",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.findInFolder",
          "when": "false"
        },
        {
          "command": "dvc.gitStageAll",
          "when": "false"
        },
        {
          "command": "dvc.gitUnstageAll",
          "when": "false"
        },
        {
          "command": "dvc.init",
          "when": "false"
        },
        {
          "command": "dvc.moveTargets",
          "when": "false"
        },
        {
          "command": "dvc.openToTheSide",
          "when": "false"
        },
        {
          "command": "dvc.pull",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.pullTarget",
          "when": "false"
        },
        {
          "command": "dvc.push",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.pushTarget",
          "when": "false"
        },
        {
          "command": "dvc.modifyExperimentParamsAndQueue",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.modifyExperimentParamsAndRun",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running && !dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.modifyExperimentParamsAndResume",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.modifyExperimentParamsResetAndRun",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.queueExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.removeExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.removeExperimentQueue",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.removeExperimentsTableFilters",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.removeExperimentsTableSorts",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.removeQueuedExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.removeTarget",
          "when": "false"
        },
        {
          "command": "dvc.renameTarget",
          "when": "false"
        },
        {
          "command": "dvc.resetWorkspace",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.runExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running && !dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.resumeCheckpointExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.resetAndRunCheckpointExperiment",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.startExperimentsQueue",
          "when": "dvc.commands.available && dvc.project.available && !dvc.runner.running"
        },
        {
          "command": "dvc.selectForCompare",
          "when": "false"
        },
        {
          "command": "dvc.showCommands",
          "when": "false"
        },
        {
          "command": "dvc.showExperiments",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.showPlots",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "when": "dvc.commands.available && dvc.project.available && dvc.runner.running"
        },
        {
          "command": "dvc.views.experimentsColumnsTree.selectColumns",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.views.experimentsTree.applyExperiment",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsTree.branchExperiment",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsTree.queueExperiment",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsTree.removeExperiment",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsTree.runExperiment",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsTree.resumeCheckpointExperiment",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsTree.resetAndRunCheckpointExperiment",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeFilter",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeAllSorts",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeSort",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsTree.autoApplyFilters",
          "when": "dvc.commands.available && dvc.project.available && !dvc.experiments.filter.selected"
        },
        {
          "command": "dvc.views.experimentsTree.disableAutoApplyFilters",
          "when": "dvc.commands.available && dvc.project.available && dvc.experiments.filter.selected"
        },
        {
          "command": "dvc.views.experimentsTree.selectExperiments",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "command": "dvc.views.plotsPathsTree.selectPlots",
          "when": "dvc.commands.available && dvc.project.available"
        }
      ],
      "scm/title": [
        {
          "command": "dvc.resetWorkspace",
          "group": "navigation@1",
          "when": "scmProvider == dvc && dvc.commands.available"
        },
        {
          "command": "dvc.commit",
          "group": "navigation@2",
          "when": "scmProvider == dvc && dvc.commands.available"
        },
        {
          "command": "dvc.pull",
          "group": "navigation@3",
          "when": "scmProvider == dvc && dvc.commands.available"
        },
        {
          "command": "dvc.push",
          "group": "navigation@4",
          "when": "scmProvider == dvc && dvc.commands.available"
        },
        {
          "command": "dvc.checkout",
          "group": "1_DVC",
          "when": "scmProvider == dvc && dvc.commands.available"
        },
        {
          "command": "dvc.showOutput",
          "group": "3_footer",
          "when": "scmProvider == dvc"
        }
      ],
      "scm/resourceState/context": [
        {
          "command": "dvc.addTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceState == untracked && dvc.commands.available"
        },
        {
          "command": "dvc.checkoutTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceGroup == changes && scmResourceState != untracked && scmResourceState != notInCache && dvc.commands.available"
        },
        {
          "command": "dvc.commitTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceGroup == changes && scmResourceState != untracked && scmResourceState != deleted && dvc.commands.available"
        },
        {
          "command": "dvc.pullTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceGroup == notInCache && dvc.commands.available"
        }
      ],
      "scm/resourceGroup/context": [
        {
          "command": "dvc.checkout",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceGroup == changes"
        },
        {
          "command": "dvc.commit",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceGroup == changes"
        },
        {
          "command": "dvc.gitStageAll",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceGroup == gitCommitReady"
        },
        {
          "command": "dvc.gitUnstageAll",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceGroup == gitCommitReady"
        }
      ],
      "editor/title": [
        {
          "command": "dvc.runExperiment",
          "group": "navigation@0",
          "when": "dvc.params.fileActive && !dvc.runner.running && dvc.commands.available && !dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.runExperiment",
          "group": "navigation@0",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available && !dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "group": "navigation@0",
          "when": "dvc.runner.running && dvc.commands.available"
        },
        {
          "command": "dvc.resumeCheckpointExperiment",
          "group": "navigation@1",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.resumeCheckpointExperiment",
          "group": "navigation@1",
          "when": "dvc.params.fileActive && !dvc.runner.running && dvc.commands.available && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.resetAndRunCheckpointExperiment",
          "group": "navigation@2",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.resetAndRunCheckpointExperiment",
          "group": "navigation@2",
          "when": "dvc.params.fileActive && !dvc.runner.running && dvc.commands.available && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.startExperimentsQueue",
          "group": "navigation@3",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available"
        },
        {
          "command": "dvc.startExperimentsQueue",
          "group": "navigation@3",
          "when": "dvc.params.fileActive && !dvc.runner.running && dvc.commands.available"
        },
        {
          "command": "dvc.queueExperiment",
          "group": "navigation@4",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available"
        },
        {
          "command": "dvc.queueExperiment",
          "group": "navigation@4",
          "when": "dvc.params.fileActive && !dvc.runner.running && dvc.commands.available"
        }
      ],
      "view/item/context": [
        {
          "command": "dvc.openToTheSide",
          "group": "navigation",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^file/"
        },
        {
          "command": "dvc.moveTargets",
          "group": "1_DVC@1",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^dirData$/"
        },
        {
          "command": "dvc.pullTarget",
          "group": "1_DVC@2",
          "when": "view == dvc.views.trackedExplorerTree"
        },
        {
          "command": "dvc.pushTarget",
          "group": "1_DVC@3",
          "when": "view == dvc.views.trackedExplorerTree && viewItem != virtual"
        },
        {
          "command": "dvc.compareSelected",
          "group": "3_compare@1",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^file/ && resourceSelectedForCompare"
        },
        {
          "command": "dvc.selectForCompare",
          "group": "3_compare@2",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^file/"
        },
        {
          "command": "dvc.findInFolder",
          "group": "4_search",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^dir/"
        },
        {
          "command": "dvc.copyFilePath",
          "group": "6_copypath@1",
          "when": "view == dvc.views.trackedExplorerTree"
        },
        {
          "command": "dvc.copyRelativeFilePath",
          "group": "6_copypath@2",
          "when": "view == dvc.views.trackedExplorerTree"
        },
        {
          "command": "dvc.renameTarget",
          "group": "7_modification@1",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^.*Data$/"
        },
        {
          "command": "dvc.deleteTarget",
          "group": "7_modification@2",
          "when": "view == dvc.views.trackedExplorerTree && viewItem != virtual"
        },
        {
          "command": "dvc.removeTarget",
          "group": "7_modification@2",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^.*Data$/"
        },
        {
          "command": "dvc.addExperimentsTableSort",
          "group": "inline",
          "when": "view == dvc.views.experimentsSortByTree && dvc.commands.available && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeSort",
          "group": "inline",
          "when": "view == dvc.views.experimentsSortByTree && dvc.commands.available && viewItem != dvcRoot"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeAllSorts",
          "group": "inline",
          "when": "view == dvc.views.experimentsSortByTree && dvc.commands.available && viewItem == dvcRoot"
        },
        {
          "command": "dvc.addExperimentsTableFilter",
          "group": "inline",
          "when": "view == dvc.views.experimentsFilterByTree && dvc.commands.available && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeFilter",
          "group": "inline",
          "when": "view == dvc.views.experimentsFilterByTree && dvc.commands.available && viewItem != dvcRoot"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
          "group": "inline",
          "when": "view == dvc.views.experimentsFilterByTree && dvc.commands.available && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.experimentsTree.applyExperiment",
          "group": "inline@1",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem =~ /^(checkpoint|experiment)$/ && !dvc.runner.running"
        },
        {
          "command": "dvc.views.experimentsTree.branchExperiment",
          "group": "inline@2",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem =~ /^(checkpoint|experiment)$/ && !dvc.runner.running"
        },
        {
          "command": "dvc.views.experimentsTree.removeExperiment",
          "group": "inline@3",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem =~ /^(experiment|queued)$/ && !dvc.runner.running"
        },
        {
          "command": "dvc.views.experimentsTree.runExperiment",
          "group": "1_modify@1",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem =~ /^(workspace|branch|experiment|queued)$/ && !dvc.runner.running && !dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.views.experimentsTree.resumeCheckpointExperiment",
          "group": "1_modify@1",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem =~ /^(workspace|branch|experiment|queued)$/ && !dvc.runner.running && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.views.experimentsTree.resetAndRunCheckpointExperiment",
          "group": "1_modify@2",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem =~ /^(workspace|branch|experiment|queued)$/ && !dvc.runner.running && dvc.experiment.checkpoints"
        },
        {
          "command": "dvc.views.experimentsTree.queueExperiment",
          "group": "1_modify@3",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem =~ /^(workspace|branch|experiment|queued)$/ && !dvc.runner.running"
        },
        {
          "command": "dvc.views.experimentsTree.selectExperiments",
          "group": "inline",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.experimentsTree.autoApplyFilters",
          "group": "inline",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && !dvc.experiments.filter.selected && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.experimentsTree.disableAutoApplyFilters",
          "group": "inline",
          "when": "view == dvc.views.experimentsTree && dvc.commands.available && dvc.experiments.filter.selected && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.plotsPathsTree.selectPlots",
          "group": "inline",
          "when": "view == dvc.views.plotsPathsTree && dvc.commands.available && viewItem == dvcRoot"
        }
      ],
      "view/title": [
        {
          "command": "dvc.pull",
          "when": "view == dvc.views.trackedExplorerTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.push",
          "when": "view == dvc.views.trackedExplorerTree",
          "group": "navigation@2"
        },
        {
          "command": "dvc.showExperiments",
          "when": "view == dvc.views.experimentsColumnsTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.showExperiments",
          "when": "view == dvc.views.experimentsTree && !dvc.experiments.webviewActive",
          "group": "navigation@1"
        },
        {
          "command": "dvc.views.experimentsColumnsTree.selectColumns",
          "when": "view == dvc.views.experimentsColumnsTree",
          "group": "navigation@2"
        },
        {
          "command": "dvc.views.experimentsColumnsTree.selectColumns",
          "group": "inline",
          "when": "view == dvc.views.experimentsColumnsTree && dvc.commands.available && viewItem == dvcRoot"
        },
        {
          "command": "dvc.runExperiment",
          "when": "view == dvc.views.experimentsTree && !dvc.experiments.webviewActive && !dvc.runner.running && !dvc.experiment.checkpoints",
          "group": "1_run@1"
        },
        {
          "command": "dvc.resumeCheckpointExperiment",
          "when": "view == dvc.views.experimentsTree && !dvc.experiments.webviewActive && !dvc.runner.running && dvc.experiment.checkpoints",
          "group": "1_run@1"
        },
        {
          "command": "dvc.resetAndRunCheckpointExperiment",
          "when": "view == dvc.views.experimentsTree && !dvc.experiments.webviewActive && !dvc.runner.running && dvc.experiment.checkpoints",
          "group": "1_run@2"
        },
        {
          "command": "dvc.runExperiment",
          "when": "view == dvc.views.experimentsTree && dvc.experiments.webviewActive && !dvc.runner.running && !dvc.experiment.checkpoints",
          "group": "navigation@1"
        },
        {
          "command": "dvc.resumeCheckpointExperiment",
          "when": "view == dvc.views.experimentsTree && dvc.experiments.webviewActive && !dvc.runner.running && dvc.experiment.checkpoints",
          "group": "navigation@1"
        },
        {
          "command": "dvc.resetAndRunCheckpointExperiment",
          "when": "view == dvc.views.experimentsTree && dvc.experiments.webviewActive && !dvc.runner.running && dvc.experiment.checkpoints",
          "group": "navigation@2"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "when": "view == dvc.views.experimentsTree && !dvc.experiments.webviewActive && dvc.runner.running",
          "group": "1_run@1"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "when": "view == dvc.views.experimentsTree && dvc.experiments.webviewActive && dvc.runner.running",
          "group": "navigation@1"
        },
        {
          "command": "dvc.showPlots",
          "when": "view == dvc.views.experimentsTree && !dvc.plots.webviewActive",
          "group": "navigation@3"
        },
        {
          "command": "dvc.views.experimentsTree.selectExperiments",
          "when": "view == dvc.views.experimentsTree && dvc.plots.webviewActive",
          "group": "navigation@3"
        },
        {
          "command": "dvc.views.experimentsTree.autoApplyFilters",
          "when": "view == dvc.views.experimentsTree && !dvc.experiments.filter.selected",
          "group": "navigation@4"
        },
        {
          "command": "dvc.views.experimentsTree.disableAutoApplyFilters",
          "when": "view == dvc.views.experimentsTree && dvc.experiments.filter.selected",
          "group": "navigation@4"
        },
        {
          "command": "dvc.modifyExperimentParamsAndRun",
          "when": "view == dvc.views.experimentsTree && !dvc.runner.running && !dvc.experiment.checkpoints",
          "group": "2_modify@1"
        },
        {
          "command": "dvc.modifyExperimentParamsAndResume",
          "when": "view == dvc.views.experimentsTree && !dvc.runner.running && dvc.experiment.checkpoints",
          "group": "2_modify@1"
        },
        {
          "command": "dvc.modifyExperimentParamsResetAndRun",
          "when": "view == dvc.views.experimentsTree && !dvc.runner.running && dvc.experiment.checkpoints",
          "group": "2_modify@2"
        },
        {
          "command": "dvc.modifyExperimentParamsAndQueue",
          "when": "view == dvc.views.experimentsTree && !dvc.runner.running",
          "group": "2_modify@3"
        },
        {
          "command": "dvc.queueExperiment",
          "when": "view == dvc.views.experimentsTree && !dvc.runner.running",
          "group": "3_queue@1"
        },
        {
          "command": "dvc.startExperimentsQueue",
          "when": "view == dvc.views.experimentsTree && !dvc.runner.running",
          "group": "3_queue@2"
        },
        {
          "command": "dvc.addExperimentsTableSort",
          "when": "view == dvc.views.experimentsSortByTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeAllSorts",
          "when": "view == dvc.views.experimentsSortByTree",
          "group": "navigation@2"
        },
        {
          "command": "dvc.addExperimentsTableFilter",
          "when": "view == dvc.views.experimentsFilterByTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
          "when": "view == dvc.views.experimentsFilterByTree",
          "group": "navigation@2"
        },
        {
          "command": "dvc.showPlots",
          "when": "view == dvc.views.plotsPathsTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.views.plotsPathsTree.selectPlots",
          "when": "view == dvc.views.plotsPathsTree",
          "group": "navigation@2"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "dvc-views",
          "title": "DVC",
          "icon": "resources/dvc-monochrome.svg"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "dvc.views.trackedExplorerTree",
          "name": "DVC Tracked",
          "when": "dvc.commands.available && dvc.project.available"
        }
      ],
      "dvc-views": [
        {
          "id": "dvc.views.experimentsColumnsTree",
          "name": "Columns",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "id": "dvc.views.welcome",
          "name": "Welcome",
          "when": "!dvc.commands.available || dvc.cli.incompatible || !dvc.project.available"
        },
        {
          "id": "dvc.views.experimentsTree",
          "name": "Experiments",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "id": "dvc.views.experimentsSortByTree",
          "name": "Sort By",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "id": "dvc.views.experimentsFilterByTree",
          "name": "Filter By",
          "when": "dvc.commands.available && dvc.project.available"
        },
        {
          "id": "dvc.views.plotsPathsTree",
          "name": "Plots",
          "when": "dvc.commands.available && dvc.project.available"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "dvc.views.welcome",
        "contents": "New to the extension?\n[Show Walkthrough](command:dvc.getStarted)\n\n",
        "when": "true"
      },
      {
        "view": "dvc.views.welcome",
        "contents": "DVC is currently unavailable, [learn more](https://dvc.org/doc).\n[Setup the Workspace](command:dvc.setupWorkspace)",
        "when": "!dvc.commands.available && !dvc.cli.incompatible"
      },
      {
        "view": "dvc.views.welcome",
        "contents": "The located version of DVC is incompatible with the extension.\n[Find Another](command:dvc.setupWorkspace)\nUpgrade DVC then...\n[Check Compatibility](command:dvc.checkCLICompatible)",
        "when": "dvc.cli.incompatible"
      },
      {
        "view": "dvc.views.welcome",
        "contents": "The currently open folder does not contain a DVC project. You can initialize a project which will enable features powered by DVC.\n[Initialize Project](command:dvc.init)\nTo learn more about how to use DVC please read [our docs](https://dvc.org/doc).",
        "when": "dvc.commands.available && !dvc.cli.incompatible && !dvc.project.available"
      },
      {
        "view": "dvc.views.trackedExplorerTree",
        "contents": "No Tracked Data to Display."
      },
      {
        "view": "dvc.views.experimentsColumnsTree",
        "contents": "No Columns to Display."
      },
      {
        "view": "dvc.views.experimentsTree",
        "contents": "No Experiments to Display."
      },
      {
        "view": "dvc.views.experimentsSortByTree",
        "contents": "No Sorts Applied. \n[$(add) Add Sort](command:dvc.addExperimentsTableSort)\n"
      },
      {
        "view": "dvc.views.experimentsFilterByTree",
        "contents": "No Filters Applied. \n[$(add) Add Filter](command:dvc.addExperimentsTableFilter)\n"
      },
      {
        "view": "dvc.views.plotsPathsTree",
        "contents": "No Plots to Display."
      }
    ],
    "walkthroughs": [
      {
        "id": "welcome",
        "title": "Get Started with DVC",
        "description": "Your first steps to set up a DVC project with all the powerful tools and features that the DVC extension has to offer!",
        "steps": [
          {
            "id": "dvc.installDVC",
            "title": "Install DVC",
            "description": "The DVC Extension requires DVC to be installed. To install follow the guide shown on [dvc.org](https://dvc.org).\n\n[Install DVC](https://dvc.org/doc/install)\n",
            "media": {
              "markdown": "resources/walkthrough/install-dvc.md"
            },
            "completionEvents": [
              "onLink:https://dvc.org",
              "onLink:https://dvc.org/doc/install"
            ]
          },
          {
            "id": "dvc.setup",
            "title": "Setup The Workspace",
            "description": "Setup the workspace for the dvc extension.\n[Setup The Workspace](command:dvc.setupWorkspace)",
            "media": {
              "markdown": "resources/walkthrough/setup-workspace.md"
            },
            "completionEvents": [
              "onCommand:dvc.setupWorkspace"
            ]
          },
          {
            "id": "dvc.showCommands",
            "title": "Available Commands",
            "description": "View all of the available commands.\n[View Commands](command:dvc.showCommands)",
            "media": {
              "markdown": "resources/walkthrough/command-palette.md"
            },
            "completionEvents": [
              "onCommand:dvc.showCommands"
            ],
            "when": "dvc.commands.available && dvc.project.available"
          },
          {
            "id": "dvc.showOutput",
            "title": "Output Channel",
            "description": "View the DVC output channel.\n[View Output](command:dvc.showOutput)",
            "media": {
              "markdown": "resources/walkthrough/output-channel.md"
            },
            "completionEvents": [
              "onCommand:dvc.showOutput"
            ],
            "when": "dvc.commands.available && dvc.project.available"
          },
          {
            "id": "dvc.scm",
            "title": "Source Control Management",
            "description": "Open the DVC SCM view.\n[Show SCM](command:workbench.view.scm)",
            "media": {
              "markdown": "resources/walkthrough/source-control-management.md"
            },
            "completionEvents": [
              "onCommand:workbench.view.scm"
            ],
            "when": "dvc.commands.available && dvc.project.available"
          },
          {
            "id": "dvc.tracked",
            "title": "Tracked Resources",
            "description": "Open the DVC tracked view.\n[Show Tracked](command:dvc.views.trackedExplorerTree.focus)",
            "media": {
              "markdown": "resources/walkthrough/tracked-explorer.md"
            },
            "completionEvents": [
              "onCommand:dvc.views.trackedExplorerTree.focus"
            ],
            "when": "dvc.commands.available && dvc.project.available"
          },
          {
            "id": "dvc.viewContainer",
            "title": "DVC View Container",
            "description": "Open the DVC view container.\n[Show Views](command:workbench.view.extension.dvc-views)",
            "media": {
              "markdown": "resources/walkthrough/view-container.md"
            },
            "completionEvents": [
              "onCommand:workbench.view.extension.dvc-views"
            ],
            "when": "dvc.commands.available && dvc.project.available"
          },
          {
            "id": "dvc.experimentsTable",
            "title": "Experiments Table",
            "description": "Open the experiments table.\n[Show Table](command:dvc.showExperiments)",
            "media": {
              "markdown": "resources/walkthrough/experiments-table.md"
            },
            "completionEvents": [
              "onCommand:dvc.showExperiments"
            ],
            "when": "dvc.commands.available && dvc.project.available"
          },
          {
            "id": "dvc.plots",
            "title": "Plots",
            "description": "Open plots.\n[Show Plots](command:dvc.showPlots)",
            "media": {
              "markdown": "resources/walkthrough/plots.md"
            },
            "completionEvents": [
              "onCommand:dvc.showPlots"
            ],
            "when": "dvc.commands.available && dvc.project.available"
          },
          {
            "id": "dvc.learnMore",
            "title": "Explore More Resources",
            "description": "Take a look into our [documentation](https://dvc.org/doc) to learn more about DVC. \n[Learn More](https://dvc.org/doc)",
            "media": {
              "markdown": "resources/walkthrough/dvc-learn-more.md"
            },
            "completionEvents": [
              "onLink:https://dvc.org/doc"
            ]
          }
        ]
      }
    ]
  },
  "scripts": {
    "format": "prettier --write '**/*.{js,json,jsx,md,scss,ts,tsx,yaml,yml}'",
    "lint:prettier": "prettier -c '**/*.{js,json,jsx,md,scss,ts,tsx,yaml,yml}'",
    "lint:eslint": "eslint --cache '**/*.{js,ts,jsx,tsx}'",
    "lint:tsc": "tsc --noEmit",
    "lint": "run-p 'lint:*'",
    "dev": "shx rm -rf dist && tsc -watch -p ./",
    "build": "yarn webpack --mode production",
    "package": "vsce package --yarn -o ./dvc.vsix",
    "test-vscode-build": "tsc -p .",
    "test-vscode-run": "node ./dist/test/runTest.js",
    "test": "jest --collect-coverage",
    "cover-vscode-run": "node ./scripts/coverIntegrationTests.js",
    "vscode:prepublish": ""
  },
  "dependencies": {
    "@hediet/std": "^0.6.0",
    "@vscode/extension-telemetry": "^0.4.10",
    "execa": "^5.1.1",
    "fs-extra": "^10.0.0",
    "js-yaml": "^4.1.0",
    "lodash.clonedeep": "^4.5.0",
    "lodash.get": "^4.4.2",
    "lodash.isempty": "^4.4.0",
    "lodash.isequal": "^4.5.0",
    "lodash.merge": "^4.6.2",
    "lodash.omit": "^4.5.0",
    "tree-kill": "^1.2.2"
  },
  "devDependencies": {
    "@types/chai": "^4.2.22",
    "@types/chai-as-promised": "^7.1.4",
    "@types/copy-webpack-plugin": "^10.1.0",
    "@types/fs-extra": "^9.0.13",
    "@types/jest": "^27.4.1",
    "@types/js-yaml": "^4.0.5",
    "@types/lodash.clonedeep": "^4.5.6",
    "@types/lodash.get": "^4.4.6",
    "@types/lodash.isempty": "^4.4.6",
    "@types/lodash.isequal": "^4.5.5",
    "@types/lodash.merge": "^4.6.6",
    "@types/lodash.omit": "^4.5.6",
    "@types/mocha": "^9.1.0",
    "@types/mock-require": "^2.0.1",
    "@types/node": "^16.11.8",
    "@types/react-vega": "^7.0.0",
    "@types/sinon-chai": "^3.2.6",
    "@types/vscode": "^1.64.0",
    "@vscode/test-electron": "^2.1.3",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "clean-webpack-plugin": "^4.0.0",
    "copy-webpack-plugin": "^10.2.4",
    "fork-ts-checker-webpack-plugin": "^6.5.0",
    "jest": "^27.5.1",
    "lint-staged": "^12.3.7",
    "mocha": "^9.2.2",
    "mock-require": "^3.0.3",
    "shx": "^0.3.3",
    "sinon": "^12.0.1",
    "sinon-chai": "^3.5.0",
    "ts-jest": "^27.1.4",
    "ts-loader": "^9.2.6",
    "vsce": "^2.6.7",
    "vscode-uri": "^3.0.2",
    "webpack": "^5.69.1",
    "webpack-cli": "^4.9.2"
  },
  "peerDependencies": {
    "typescript": "*"
  },
  "__metadata": {
    "id": "96c35fb6-adb8-4c1e-b953-4004af8451e8",
    "publisherDisplayName": "Iterative",
    "publisherId": "bc4dde4d-67b8-48bd-865c-7ee75e976429",
    "isPreReleaseVersion": false
  }
}
