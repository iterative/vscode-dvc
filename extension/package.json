{
  "name": "dvc",
  "private": true,
  "displayName": "%displayName%",
  "description": "%description%",
  "publisher": "iterative",
  "icon": "docs/dvc.png",
  "extensionDependencies": [
    "vscode.git"
  ],
  "version": "0.1.0",
  "license": "Apache-2.0",
  "readme": "./README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/iterative/vscode-dvc"
  },
  "bugs": "https://github.com/iterative/vscode-dvc",
  "homepage": "https://github.com/iterative/vscode-dvc/README.md",
  "keywords": [
    "iterative",
    "data",
    "version",
    "control",
    "dvc"
  ],
  "categories": [
    "Data Science",
    "Visualization"
  ],
  "galleryBanner": {
    "color": "#333",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.60.0-insiders",
    "node": ">=10.2.0"
  },
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "%command.addExperimentsTableFilter%",
        "command": "dvc.addExperimentsTableFilter",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.addExperimentsTableSort%",
        "command": "dvc.addExperimentsTableSort",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.addTarget%",
        "command": "dvc.addTarget",
        "category": "DVC",
        "icon": "$(add)"
      },
      {
        "title": "%command.applyExperiment%",
        "command": "dvc.applyExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.branchExperiment%",
        "command": "dvc.branchExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.checkout%",
        "command": "dvc.checkout",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.checkoutTarget%",
        "command": "dvc.checkoutTarget",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.commit%",
        "command": "dvc.commit",
        "category": "DVC",
        "icon": "$(check)"
      },
      {
        "title": "%command.commitTarget%",
        "command": "dvc.commitTarget",
        "category": "DVC",
        "icon": "$(check)"
      },
      {
        "title": "%command.compareSelected%",
        "command": "dvc.compareSelected",
        "category": "DVC"
      },
      {
        "title": "%command.copyFilePath%",
        "command": "dvc.copyFilePath",
        "category": "DVC"
      },
      {
        "title": "%command.copyRelativeFilePath%",
        "command": "dvc.copyRelativeFilePath",
        "category": "DVC"
      },
      {
        "title": "%command.deleteTarget%",
        "command": "dvc.deleteTarget",
        "category": "DVC",
        "icon": "$(trash)"
      },
      {
        "title": "%command.experimentGarbageCollect%",
        "command": "dvc.experimentGarbageCollect",
        "category": "DVC"
      },
      {
        "title": "%command.findInFolder%",
        "command": "dvc.findInFolder",
        "category": "DVC"
      },
      {
        "title": "%command.getStarted%",
        "command": "dvc.getStarted",
        "category": "DVC"
      },
      {
        "title": "%command.init%",
        "command": "dvc.init",
        "category": "DVC"
      },
      {
        "title": "%command.moveTargets%",
        "command": "dvc.moveTargets",
        "category": "DVC"
      },
      {
        "title": "%command.openToTheSide%",
        "command": "dvc.openToTheSide",
        "category": "DVC"
      },
      {
        "title": "%command.pull%",
        "command": "dvc.pull",
        "category": "DVC",
        "icon": "$(cloud-download)"
      },
      {
        "title": "%command.pullTarget%",
        "command": "dvc.pullTarget",
        "category": "DVC",
        "icon": "$(cloud-download)"
      },
      {
        "title": "%command.push%",
        "command": "dvc.push",
        "category": "DVC",
        "icon": "$(cloud-upload)"
      },
      {
        "title": "%command.pushTarget%",
        "command": "dvc.pushTarget",
        "category": "DVC",
        "icon": "$(cloud-upload)"
      },
      {
        "title": "%command.queueExperiment%",
        "command": "dvc.queueExperiment",
        "category": "DVC",
        "icon": {
          "dark": "resources/dark/queue-experiment.svg",
          "light": "resources/light/queue-experiment.svg"
        }
      },
      {
        "title": "%command.removeExperiment%",
        "command": "dvc.removeExperiment",
        "category": "DVC"
      },
      {
        "title": "%command.removeExperimentsTableFilters%",
        "command": "dvc.removeExperimentsTableFilters",
        "category": "DVC"
      },
      {
        "title": "%command.removeExperimentsTableSorts%",
        "command": "dvc.removeExperimentsTableSorts",
        "category": "DVC",
        "icon": "$(close-all)"
      },
      {
        "title": "%command.removeTarget%",
        "command": "dvc.removeTarget",
        "category": "DVC",
        "icon": "$(trash)"
      },
      {
        "title": "%command.renameTarget%",
        "command": "dvc.renameTarget",
        "category": "DVC"
      },
      {
        "title": "%command.resetWorkspace%",
        "command": "dvc.resetWorkspace",
        "category": "DVC",
        "icon": "$(discard)"
      },
      {
        "title": "%command.runExperiment%",
        "command": "dvc.runExperiment",
        "category": "DVC",
        "icon": {
          "light": "resources/light/run-experiment.svg",
          "dark": "resources/dark/run-experiment.svg"
        }
      },
      {
        "title": "%command.runQueuedExperiments%",
        "command": "dvc.runQueuedExperiments",
        "category": "DVC",
        "icon": {
          "dark": "resources/dark/run-all.svg",
          "light": "resources/light/run-all.svg"
        }
      },
      {
        "title": "%command.runResetExperiment%",
        "command": "dvc.runResetExperiment",
        "category": "DVC",
        "icon": "$(notebook-revert)"
      },
      {
        "title": "%command.selectForCompare%",
        "command": "dvc.selectForCompare",
        "category": "DVC"
      },
      {
        "title": "%command.setupWorkspace%",
        "command": "dvc.setupWorkspace",
        "category": "DVC"
      },
      {
        "title": "%command.showCommands",
        "command": "dvc.showCommands",
        "category": "DVC"
      },
      {
        "title": "%command.showExperiments%",
        "command": "dvc.showExperiments",
        "category": "DVC"
      },
      {
        "title": "%command.showOutput%",
        "command": "dvc.showOutput",
        "category": "DVC"
      },
      {
        "title": "%command.stopRunningExperiment%",
        "command": "dvc.stopRunningExperiment",
        "category": "DVC",
        "icon": {
          "light": "resources/light/stop-experiment.svg",
          "dark": "resources/dark/stop-experiment.svg"
        }
      },
      {
        "title": "%command.views.experimentsFilterByTree.removeAllFilters%",
        "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
        "category": "DVC",
        "icon": "$(close-all)"
      },
      {
        "title": "%command.views.experimentsFilterByTree.removeFilter%",
        "command": "dvc.views.experimentsFilterByTree.removeFilter",
        "category": "DVC",
        "icon": "$(close)"
      },
      {
        "title": "%command.views.experimentsSortByTree.removeAllSorts%",
        "command": "dvc.views.experimentsSortByTree.removeAllSorts",
        "category": "DVC",
        "icon": "$(close-all)"
      },
      {
        "title": "%command.views.experimentsSortByTree.removeSort%",
        "command": "dvc.views.experimentsSortByTree.removeSort",
        "category": "DVC",
        "icon": "$(close)"
      }
    ],
    "configuration": {
      "title": "DVC",
      "properties": {
        "dvc.dvcPath": {
          "title": "%config.dvcPath.title%",
          "description": "%config.dvcPath.description%",
          "type": "string",
          "default": null
        },
        "dvc.pythonPath": {
          "title": "%config.pythonPath.title%",
          "description": "%config.pythonPath.description%",
          "type": "string",
          "default": null
        }
      }
    },
    "menus": {
      "commandPalette": [
        {
          "command": "dvc.addTarget",
          "when": "false"
        },
        {
          "command": "dvc.applyExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.branchExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.checkoutTarget",
          "when": "false"
        },
        {
          "command": "dvc.commitTarget",
          "when": "false"
        },
        {
          "command": "dvc.compareSelected",
          "when": "false"
        },
        {
          "command": "dvc.copyFilePath",
          "when": "false"
        },
        {
          "command": "dvc.copyRelativeFilePath",
          "when": "false"
        },
        {
          "command": "dvc.deleteTarget",
          "when": "false"
        },
        {
          "command": "dvc.experimentGarbageCollect",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.findInFolder",
          "when": "false"
        },
        {
          "command": "dvc.init",
          "when": "false"
        },
        {
          "command": "dvc.moveTargets",
          "when": "false"
        },
        {
          "command": "dvc.openToTheSide",
          "when": "false"
        },
        {
          "command": "dvc.pullTarget",
          "when": "false"
        },
        {
          "command": "dvc.pushTarget",
          "when": "false"
        },
        {
          "command": "dvc.queueExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.removeExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.removeTarget",
          "when": "false"
        },
        {
          "command": "dvc.renameTarget",
          "when": "false"
        },
        {
          "command": "dvc.runExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.runQueuedExperiments",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.runResetExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.selectForCompare",
          "when": "false"
        },
        {
          "command": "dvc.showCommands",
          "when": "false"
        },
        {
          "command": "dvc.showExperiments",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "when": "dvc.commands.available == true"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeFilter",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeAllSorts",
          "when": "false"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeSort",
          "when": "false"
        }
      ],
      "scm/title": [
        {
          "command": "dvc.resetWorkspace",
          "group": "navigation@1",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.commit",
          "group": "navigation@2",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.pull",
          "group": "navigation@3",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.push",
          "group": "navigation@4",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.checkout",
          "group": "1_DVC",
          "when": "scmProvider == dvc && dvc.commands.available == true"
        },
        {
          "command": "dvc.showOutput",
          "group": "3_footer",
          "when": "scmProvider == dvc"
        }
      ],
      "scm/resourceState/context": [
        {
          "command": "dvc.addTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceState == untracked && dvc.commands.available == true"
        },
        {
          "command": "dvc.checkoutTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceState != untracked && scmResourceState != notInCache && dvc.commands.available == true"
        },
        {
          "command": "dvc.commitTarget",
          "group": "inline",
          "when": "scmProvider == dvc && scmResourceState != untracked && scmResourceState != deleted && dvc.commands.available == true"
        }
      ],
      "editor/title": [
        {
          "command": "dvc.runExperiment",
          "alt": "dvc.runResetExperiment",
          "group": "navigation@0",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "group": "navigation@0",
          "when": "dvc.experiments.webviewActive && dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runQueuedExperiments",
          "group": "navigation@1",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.queueExperiment",
          "group": "navigation@2",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runExperiment",
          "group": "1_run@0",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.stopRunningExperiment",
          "group": "1_run@0",
          "when": "dvc.experiments.webviewActive && dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.queueExperiment",
          "group": "1_run@1",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runQueuedExperiments",
          "group": "1_run@2",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        },
        {
          "command": "dvc.runResetExperiment",
          "group": "1_run@3",
          "when": "dvc.experiments.webviewActive && !dvc.runner.running && dvc.commands.available == true"
        }
      ],
      "view/item/context": [
        {
          "command": "dvc.openToTheSide",
          "group": "navigation",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^file/"
        },
        {
          "command": "dvc.moveTargets",
          "group": "1_DVC@1",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^dirData$/"
        },
        {
          "command": "dvc.pullTarget",
          "group": "1_DVC@2",
          "when": "view == dvc.views.trackedExplorerTree"
        },
        {
          "command": "dvc.pushTarget",
          "group": "1_DVC@3",
          "when": "view == dvc.views.trackedExplorerTree && viewItem != virtual"
        },
        {
          "command": "dvc.compareSelected",
          "group": "3_compare@1",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^file/ && resourceSelectedForCompare"
        },
        {
          "command": "dvc.selectForCompare",
          "group": "3_compare@2",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^file/"
        },
        {
          "command": "dvc.findInFolder",
          "group": "4_search",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^dir/"
        },
        {
          "command": "dvc.copyFilePath",
          "group": "6_copypath@1",
          "when": "view == dvc.views.trackedExplorerTree"
        },
        {
          "command": "dvc.copyRelativeFilePath",
          "group": "6_copypath@2",
          "when": "view == dvc.views.trackedExplorerTree"
        },
        {
          "command": "dvc.renameTarget",
          "group": "7_modification@1",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^.*Data$/"
        },
        {
          "command": "dvc.deleteTarget",
          "group": "7_modification@2",
          "when": "view == dvc.views.trackedExplorerTree && viewItem != virtual"
        },
        {
          "command": "dvc.removeTarget",
          "group": "7_modification@2",
          "when": "view == dvc.views.trackedExplorerTree && viewItem =~ /^.*Data$/"
        },
        {
          "command": "dvc.addExperimentsTableSort",
          "group": "inline",
          "when": "view == dvc.views.experimentsSortByTree && dvc.commands.available == true && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeSort",
          "group": "inline",
          "when": "view == dvc.views.experimentsSortByTree && dvc.commands.available == true && viewItem != dvcRoot"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeAllSorts",
          "group": "inline",
          "when": "view == dvc.views.experimentsSortByTree && dvc.commands.available == true && viewItem == dvcRoot"
        },
        {
          "command": "dvc.addExperimentsTableFilter",
          "group": "inline",
          "when": "view == dvc.views.experimentsFilterByTree && dvc.commands.available == true && viewItem == dvcRoot"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeFilter",
          "group": "inline",
          "when": "view == dvc.views.experimentsFilterByTree && dvc.commands.available == true && viewItem != dvcRoot"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
          "group": "inline",
          "when": "view == dvc.views.experimentsFilterByTree && dvc.commands.available == true && viewItem == dvcRoot"
        }
      ],
      "view/title": [
        {
          "command": "dvc.runExperiment",
          "when": "view == dvc.views.experimentsTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.runQueuedExperiments",
          "when": "view == dvc.views.experimentsTree",
          "group": "navigation@2"
        },
        {
          "command": "dvc.queueExperiment",
          "when": "view == dvc.views.experimentsTree",
          "group": "navigation@3"
        },
        {
          "command": "dvc.addExperimentsTableSort",
          "when": "view == dvc.views.experimentsSortByTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.views.experimentsSortByTree.removeAllSorts",
          "when": "view == dvc.views.experimentsSortByTree",
          "group": "navigation@2"
        },
        {
          "command": "dvc.addExperimentsTableFilter",
          "when": "view == dvc.views.experimentsFilterByTree",
          "group": "navigation@1"
        },
        {
          "command": "dvc.views.experimentsFilterByTree.removeAllFilters",
          "when": "view == dvc.views.experimentsFilterByTree",
          "group": "navigation@2"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "dvc-views",
          "title": "DVC",
          "icon": "resources/dvc-monochrome.svg"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "dvc.views.trackedExplorerTree",
          "name": "DVC Tracked"
        }
      ],
      "dvc-views": [
        {
          "id": "dvc.views.experimentsParamsAndMetricsTree",
          "name": "Params & Metrics",
          "when": "dvc.commands.available == true && dvc.project.available == true"
        },
        {
          "id": "dvc.views.experimentsTree",
          "name": "Experiments",
          "when": "dvc.commands.available == true && dvc.project.available == true"
        },
        {
          "id": "dvc.views.experimentsSortByTree",
          "name": "Sort By",
          "when": "dvc.commands.available == true && dvc.project.available == true"
        },
        {
          "id": "dvc.views.experimentsFilterByTree",
          "name": "Filter By",
          "when": "dvc.commands.available == true && dvc.project.available == true"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "dvc.views.trackedExplorerTree",
        "contents": "DVC is currently unavailable, [learn more](https://www.dvc.org/).\n[Setup the workspace](command:dvc.setupWorkspace)",
        "when": "dvc.commands.available != true"
      },
      {
        "view": "dvc.views.trackedExplorerTree",
        "contents": "The currently open folder does not contain a DVC project. You can initialize a project which will enable features powered by DVC.\n[Initialize Project](command:dvc.init)\nTo learn more about how to use DVC and this extension please read [our docs](https://dvc.org/doc).",
        "when": "dvc.commands.available == true && dvc.project.available == false"
      },
      {
        "view": "dvc.views.experimentsTree",
        "contents": "No running or queued experiments. \n[Run Experiment](command:dvc.runExperiment)\n"
      },
      {
        "view": "dvc.views.experimentsSortByTree",
        "contents": "No sorts applied. \n[Add Sort](command:dvc.addExperimentsTableSort)\n"
      },
      {
        "view": "dvc.views.experimentsFilterByTree",
        "contents": "No filters applied. \n[Add Filter](command:dvc.addExperimentsTableFilter)\n"
      }
    ],
    "walkthroughs": [
      {
        "id": "welcome",
        "title": "Get started with DVC",
        "description": "Your first steps to set up a DVC project with all the powerful tools and features that the DVC extension has to offer!",
        "steps": [
          {
            "id": "dvc.installDVC",
            "title": "Install DVC",
            "description": "The DVC Extension requires DVC to be installed. To install follow the guide shown on [dvc.org](https://dvc.org).\n\n[Install DVC](https://dvc.org/doc/install)\n",
            "media": {
              "markdown": "resources/walkthrough/install-dvc.md"
            },
            "completionEvents": [
              "onLink:https://dvc.org",
              "onLink:https://dvc.org/doc/install"
            ]
          },
          {
            "id": "dvc.setup",
            "title": "Setup the workspace",
            "description": "Setup the workspace for the dvc extension.\n[Setup the workspace](command:dvc.setupWorkspace)",
            "media": {
              "markdown": "resources/walkthrough/setup-workspace.md"
            },
            "completionEvents": [
              "onCommand:dvc.setupWorkspace"
            ]
          },
          {
            "id": "dvc.showCommands",
            "title": "Available commands",
            "description": "View all of the available commands.\n[View commands](command:dvc.showCommands)",
            "media": {
              "markdown": "resources/walkthrough/command-palette.md"
            },
            "completionEvents": [
              "onCommand:dvc.showCommands"
            ],
            "when": "dvc.commands.available == true && dvc.project.available == true"
          },
          {
            "id": "dvc.showOutput",
            "title": "Output channel",
            "description": "View the DVC output channel.\n[View output](command:dvc.showOutput)",
            "media": {
              "markdown": "resources/walkthrough/output-channel.md"
            },
            "completionEvents": [
              "onCommand:dvc.showOutput"
            ],
            "when": "dvc.commands.available == true && dvc.project.available == true"
          },
          {
            "id": "dvc.scm",
            "title": "Source control management",
            "description": "Open the DVC scm view.\n[Show scm](command:workbench.view.scm)",
            "media": {
              "markdown": "resources/walkthrough/source-control-management.md"
            },
            "completionEvents": [
              "onCommand:workbench.view.scm"
            ],
            "when": "dvc.commands.available == true && dvc.project.available == true"
          },
          {
            "id": "dvc.tracked",
            "title": "Tracked resources",
            "description": "Open the DVC tracked view.\n[Show tracked](command:dvc.views.trackedExplorerTree.focus)",
            "media": {
              "markdown": "resources/walkthrough/tracked-explorer.md"
            },
            "completionEvents": [
              "onCommand:dvc.views.trackedExplorerTree.focus"
            ],
            "when": "dvc.commands.available == true && dvc.project.available == true"
          },
          {
            "id": "dvc.viewContainer",
            "title": "Experiments views container",
            "description": "Open the experiments views container.\n[Show views](command:workbench.view.extension.dvc-views)",
            "media": {
              "markdown": "resources/walkthrough/experiments-views.md"
            },
            "completionEvents": [
              "onCommand:workbench.view.extension.dvc-views"
            ],
            "when": "dvc.commands.available == true && dvc.project.available == true"
          },
          {
            "id": "dvc.experimentsTable",
            "title": "Experiments table",
            "description": "Open the experiments table.\n[Show table](command:dvc.showExperiments)",
            "media": {
              "markdown": "resources/walkthrough/experiments-table.md"
            },
            "completionEvents": [
              "onCommand:dvc.showExperiments"
            ],
            "when": "dvc.commands.available == true && dvc.project.available == true"
          },
          {
            "id": "dvc.learnMore",
            "title": "Explore more resources",
            "description": "Take a look into our [documentation](https://dvc.org/doc) to learn more about DVC. \n[Learn more](https://dvc.org/doc)",
            "media": {
              "markdown": "resources/walkthrough/dvc-learn-more.md"
            },
            "completionEvents": [
              "onLink:https://dvc.org/doc"
            ]
          }
        ]
      }
    ]
  },
  "enableProposedApi": true,
  "scripts": {
    "dev": "shx rm -rf dist && tsc -watch -p ./",
    "build": "yarn build-webpack && yarn package",
    "build-webpack": "webpack --mode production",
    "package": "vsce package --yarn",
    "pub": "vsce publish --yarn --baseImagesUrl https://github.com/iterative/vscode-dvc/raw/master/extension --baseContentUrl https://github.com/iterative/vscode-dvc/raw/master/extension",
    "test-vscode-build": "tsc -p .",
    "test-vscode-run": "node ./dist/test/runTest.js",
    "test-staged": "lint-staged",
    "test": "jest",
    "cover": "jest --collect-coverage",
    "vscode:prepublish": ""
  },
  "dependencies": {
    "@hediet/std": "^0.6.0",
    "chokidar": "^3.5.2",
    "execa": "^5.1.1",
    "fs-extra": "^10.0.0",
    "lodash.get": "^4.4.2",
    "lodash.isequal": "^4.5.0",
    "mobx": "^6.0.4",
    "vscode-extension-telemetry": "^0.4.0"
  },
  "devDependencies": {
    "@types/chai": "^4.2.14",
    "@types/chai-as-promised": "^7.1.4",
    "@types/chokidar": "^2.1.3",
    "@types/copy-webpack-plugin": "^8.0.0",
    "@types/fs-extra": "^9.0.7",
    "@types/jest": "^26.0.23",
    "@types/lodash.get": "^4.4.6",
    "@types/lodash.isequal": "^4.5.5",
    "@types/mocha": "^8.2.0",
    "@types/node": "^14.14.22",
    "@types/sinon-chai": "^3.2.5",
    "@types/vscode": "^1.60.0",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "clean-webpack-plugin": "^3.0.0",
    "copy-webpack-plugin": "^9.0.1",
    "jest": "^27.0.5",
    "lint-staged": "^11.0.0",
    "mocha": "^9.0.0",
    "shx": "^0.3.3",
    "sinon": "^11.1.1",
    "sinon-chai": "^3.5.0",
    "ts-jest": "^27.0.3",
    "ts-loader": "^9.2.3",
    "vsce": "^1.99.0",
    "vscode-test": "^1.6.1",
    "vscode-uri": "^3.0.2",
    "webpack": "^5.40.0",
    "webpack-cli": "^4.7.2"
  },
  "lint-staged": {
    "*.{js,ts,tsx}": "jest --bail --findRelatedTests"
  },
  "peerDependencies": {
    "typescript": "*"
  }
}
