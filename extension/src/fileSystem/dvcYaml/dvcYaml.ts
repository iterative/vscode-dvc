import { load } from 'js-yaml'
import { Any } from '../../util/object'

export interface DvcYAML {
  /**
   * List of stages
   */
  stages?: { [key: string]: Stage | ForeachDo }
  /**
   * Variables for the parametrization
   */
  vars?: Var[]
}

/**
 * Parametrized stage definition that'll be substituted over for each of the
 * value from the foreach data.
 */
export interface ForeachDo {
  /**
   * Parametrized stage definition that'll be substituted over for each of the
   * value from the foreach data.
   */
  do?: Stage
  /**
   * Iterable to loop through in foreach. Can be a parametrized string, list or a dictionary.
   *
   * The stages will be generated by iterating through this data, by substituting
   * data in the `do` block.
   */
  foreach?: Foreach
}

/**
 * Command to run
 */
export type Cmd = string[] | string

/**
 * Parametrized stage definition that'll be substituted over for each of the
 * value from the foreach data.
 */
export interface Stage {
  /**
   * Assume stage as always changed
   */
  always_changed?: boolean
  /**
   * Command to run
   */
  cmd: Cmd
  /**
   * Dependencies for the stage
   */
  deps?: string[]
  /**
   * Description of the stage
   */
  desc?: string
  /**
   * Assume stage as unchanged
   */
  frozen?: boolean
  /**
   * Declare output as dvclive
   */
  live?: { [key: string]: LiveFlags }
  /**
   * Additional information/metadata
   */
  meta?: Any
  /**
   * Metrics of the stage
   */
  metrics?: Out[]
  /**
   * Outputs of the stage
   */
  outs?: Out[]
  /**
   * Params for the stage
   */
  params?: Param[]
  /**
   * Plots of the stage
   */
  plots?: Plot[]
  /**
   * Variables for the parametrization
   */
  vars?: Var[]
  /**
   * Working directory
   */
  wdir?: string
}

export interface LiveFlags {
  /**
   * Cache output by DVC
   */
  cache?: boolean
  /**
   * Indicate that the output is associated with in-code checkpoints
   */
  checkpoint?: boolean
  /**
   * User description for the output
   */
  desc?: string
  /**
   * Whether the target CSV or TSV has a header or not
   */
  header?: boolean
  /**
   * Signals dvclive to produce training report
   */
  html?: boolean
  /**
   * Persist output between runs
   */
  persist?: boolean
  /**
   * Signals dvclive to dump latest metrics file
   */
  summary?: boolean
  /**
   * Default plot template
   */
  template?: string
  /**
   * Default plot title
   */
  title?: string
  /**
   * Default field name to use as x-axis data
   */
  x?: string
  /**
   * Default label for the x-axis
   */
  x_label?: string
  /**
   * Default field name to use as y-axis data
   */
  y?: string
  /**
   * Default label for the y-axis
   */
  y_label?: string
}

export type Out = { [key: string]: OutFlags } | string

export interface OutFlags {
  /**
   * Cache output by DVC
   */
  cache?: boolean
  /**
   * Indicate that the output is associated with in-code checkpoints
   */
  checkpoint?: boolean
  /**
   * User description for the output
   */
  desc?: string
  /**
   * Persist output between runs
   */
  persist?: boolean
}

export type Param = { [key: string]: string[] | null } | string

export type Plot = { [key: string]: PlotFlags } | string

export interface PlotFlags {
  /**
   * Cache output by DVC
   */
  cache?: boolean
  /**
   * Indicate that the output is associated with in-code checkpoints
   */
  checkpoint?: boolean
  /**
   * User description for the output
   */
  desc?: string
  /**
   * Whether the target CSV or TSV has a header or not
   */
  header?: boolean
  /**
   * Persist output between runs
   */
  persist?: boolean
  /**
   * Default plot template
   */
  template?: string
  /**
   * Default plot title
   */
  title?: string
  /**
   * Default field name to use as x-axis data
   */
  x?: string
  /**
   * Default label for the x-axis
   */
  x_label?: string
  /**
   * Default field name to use as y-axis data
   */
  y?: string
  /**
   * Default label for the y-axis
   */
  y_label?: string
}

export type Var = { [key: string]: Any } | string

/**
 * Iterable to loop through in foreach. Can be a parametrized string, list or a dictionary.
 *
 * The stages will be generated by iterating through this data, by substituting
 * data in the `do` block.
 */
export type Foreach = Any[] | { [key: string]: Any } | string

export const isStage = (value: Stage | ForeachDo): value is Stage =>
  !!(value as Stage).cmd

export const parseDvcYaml = (txt: string) => {
  return load(txt) as DvcYAML
}
